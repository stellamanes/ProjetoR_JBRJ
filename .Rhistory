plot(anscombe$y2 ~ anscombe$x2)
abline(mlist[[2]])
plot(anscombe$y2 ~ anscombe$x3)
abline(mlist[[3]])
plot(anscombe$y3 ~ anscombe$x4)
abline(mlist[[4]])
par(mfrow=c(1,1)) # retorna a janela grafica para o padrao de 1 linha e 1 coluna
par(mfrow=c(2,2), #abre uma janela gráfica com 2 linhas e 2 colunas
las=1, # deixa as legendas dos eixos na vertical
bty="l") # tipo do box do grafico em L
plot(anscombe$y1 ~ anscombe$x1) #plot das variaveis
abline(mlist[[1]]) # adicionando a reta prevista pelo modelo de regressao
plot(anscombe$y2 ~ anscombe$x2)
abline(mlist[[2]])
plot(anscombe$y3 ~ anscombe$x3)
abline(mlist[[3]])
plot(anscombe$y4 ~ anscombe$x4)
abline(mlist[[4]])
data(iris)
#Após carregar o conjunto de dados, use o comando ?iris para entender mais sobre o conjunto de dados. Vamos então começar com as inspeções básicas do arquivo.
?iris
head(iris)
summary(iris)
summary(mlist)
summary(mlist[[1]])
summary(iris)
#Quantas informações por espécie?
table(iris$Species)
# media do comprimento de sepala por especie
tapply(X = iris$Sepal.Length, INDEX = list(iris$Species), FUN = mean)
# a mesma tarefa, executada por outra funcao. Outros argumentos e outra saída
aggregate(x = iris$Sepal.Length, by = list(iris$Species), FUN = mean)
# ainda a mesma tarefa, com a mesma função mas em uma notação diferente
aggregate(Sepal.Length ~ Species, data=iris, mean)
#Podemos fazer o mesmo para as outras variáveis.
aggregate(Sepal.Length ~ Species, data=iris, mean)
aggregate(Sepal.Width ~ Species, data=iris, mean)
aggregate(Petal.Length ~ Species, data=iris, mean)
#E agora vamos calcular o desvio padrão das variáveis.
tapply(X = iris$Sepal.Length, INDEX = list(iris$Species), FUN = sd)
tapply(X = iris$Sepal.Width, INDEX = list(iris$Species), FUN = sd)
tapply(X = iris$Petal.Length, INDEX = list(iris$Species), FUN = sd)
tapply(X = iris$Petal.Width, INDEX = list(iris$Species), FUN = sd)
# criando matriz de 3 colunas - uma para cada sp - e 4 linhas - uma para cada metrica
medias <- matrix(NA, ncol=3, nrow=4)
medias
# definindo o nome das colunas e das linhas da matriz
colnames(medias) <- unique(iris$Species)
rownames(medias) <- names(iris)[-5]
medias
for (i in 1:4){
medias[i,] <- tapply(iris[,i], iris$Species, mean)
}
medias
# media do comprimento de sepala por especie
tapply(X = iris$Sepal.Length, INDEX = list(iris$Species), FUN = mean)
# a mesma tarefa, executada por outra funcao. Outros argumentos e outra saída
aggregate(x = iris$Sepal.Length, by = list(iris$Species), FUN = mean)
#Medidas de tendência central
#Média
vars <- iris[,-5]
vars
apply(vars, 2, mean)
apply(vars, 2, mean)
#Mediana: 50º quantil, de forma que divide os dados em duas metades
apply(vars, 2, median)
#Moda: valor mais frequente na amostra
freq_sl <- sort(table(iris$Sepal.Length), decreasing = TRUE)
freq_sl[1]
freq_sl[1]
#Medidas de dispersão
#Variância: desvio da média
apply(vars, 2, var)
#Desvio padrão: raiz quadrada da variância
sd01 <- apply(vars, 2, sd)
sd01
# outra forma:
sd02 <- apply(vars, 2, function(x) sqrt(var(x)))
sd01
sd02
sd01==sd02
cv <- function(x){
sd(x)/mean(x)*100
}
cv
cv
apply(vars, 2, cv)
vars
apply(vars, 2, cv)
#Métodos gráficos
install.packages("ggplot2")
library(ggplot2)
barplot(table(iris$Species))
barplot(table(iris$Species))
barplot(table(iris$Species))
par(mfrow=c(2,2))
barplot(table(iris$Species))
geom_bar(table(iris$Species))
geom_bar(table(iris$Species))
geom_bar(aes(iris$Species))
par(mfrow=c(2,2))
par(mfrow=c(2,2))
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Length)
par(mfrow=c(1,1))
hist(iris$Sepal.Width, breaks = 4)
par(mfrow=c(1,2))
hist(iris$Sepal.Width)
hist(iris$Sepal.Width, breaks = 4)
hist(iris$Sepal.Width, freq = FALSE)
ar(mfrow=c(1,2))
hist(iris$Sepal.Width)
hist(iris$Sepal.Width, freq = FALSE)
par(mfrow=c(1,2))
hist(iris$Sepal.Width)
hist(iris$Sepal.Width, freq = FALSE)
par(mfrow=c(1,2))
# plot da curva de densidade
plot(density(iris$Sepal.Width))
# plot da curva de densidade sobre o histograma de densidade
hist(iris$Sepal.Width, freq = FALSE)
lines(density(iris$Sepal.Width), col="blue") # note que agora estamos usando a funcao o comando add=TRUE
par(mfrow=c(1,1))
boxplot(iris$Sepal.Length)
boxplot(iris$Sepal.Width)
boxplot(iris$Petal.Length)
boxplot(Sepal.Length ~ Species, data=iris)
boxplot(Petal.Length ~ Species, data=iris)
#leia o arquivo trees.csv que já está no seu diretório data
read.table(file = "./Data/trees.txt")
#leia o arquivo trees.csv que já está no seu diretório data
read.table(file = "./Data/trees.txt", sep = ",")
trees <- read.table(file = "./Data/trees.txt", sep = ",")
trees
#faça o sumário dos dados
summary(trees)
#calcule o desvio padrão e a variância de cada uma das variáveis
apply(X = trees, FUN = sd)
#calcule o desvio padrão e a variância de cada uma das variáveis
apply(X = trees, FUN = sd)
#calcule o desvio padrão e a variância de cada uma das variáveis
apply(X = trees, MARGIN = 2, FUN = sd)
#calcule o desvio padrão e a variância de cada uma das variáveis
apply(X = trees, MARGIN = 2, FUN = sd)
as.numeric(trees)
as.numeric(trees[1:3])
as.numeric(trees[,1:3])
class(trees)
class(trees$V1)
as.numeric(trees$V1)
class(trees$V1)
data.frame(as.numeric(trees$v1), as.numeric(trees$V2), as.numeric(trees$V3))
treesv1 <- as.numeric(trees$V1)
class(trees$V1)
class(treesv1)
treesv2 <- as.numeric(trees$v2)
treesv3 <- as.numeric(trees$v3)
data.frame(treesv1, treesv2, treesv3)
trees <- data.frame(treesv1, treesv2, treesv3)
class(trees$V1)
class(trees$V1)
class(treesv1)
class(treesv1)
treesv2 <- as.numeric(trees$v2)
treesv3 <- as.numeric(trees$v3)
trees <- data.frame(treesv1, treesv2, treesv3)
treesv1
treesv2
#faça o sumário dos dados
summary(trees)
treesv3
trees <- read.table(file = "./Data/trees.txt", sep = ",")
trees
#calcule o desvio padrão e a variância de cada uma das variáveis
apply(X = trees, MARGIN = 2, FUN = sd)
trees <- read.table(file = "./Data/trees.txt", sep = ",")
trees
#calcule o desvio padrão e a variância de cada uma das variáveis
apply(X = trees, MARGIN = 2, FUN = sd)
trees <- read.table(file = "./Data/trees.txt", sep = ",", header = TRUE)
trees
#calcule o desvio padrão e a variância de cada uma das variáveis
apply(X = trees, MARGIN = 2, FUN = sd)
#Exercicio
sal read.csv("https://raw.githubusercontent.com/AndreaSanchezTapia/analise_de_dados_ENBT_2019/master/aula07/data/salarios.csv")
#Exercicio
sal <- read.csv("https://raw.githubusercontent.com/AndreaSanchezTapia/analise_de_dados_ENBT_2019/master/aula07/data/salarios.csv")
sal
head(sal)
summary(sal)
mh <- lm(salario ~ experiencia, data=sal[sal$sexo=="H",])
mm <- lm(salario ~ experiencia, data=sal[sal$sexo=="M",])
mh
mm
coefh <- coef(mh)
coefm <- coef(mm)
limy <- c(min(sal$salario),max(sal$salario))
limx <- c(min(sal$experiencia),max(sal$experiencia))
labx <- "Experiência (anos)"
laby <- "Salário (R$)"
par(mfrow=c(1,2), las=1, bty="l")
plot(salario ~ experiencia, data=sal[sal$sexo=="H",],
col="tomato",
ylim=limy, xlim=limx,
ylab=laby, xlab=labx)
abline(a=coefh[1], b=coefh[2],
col='tomato', lwd=2)
mtext("A", 3, adj=0, font=2)
plot(salario ~ experiencia, data=sal[sal$sexo=="M",],
col="navy",
ylim=limy, xlim=limx,
ylab="", xlab=labx)
mtext("B", 3, adj=0, font=2)
abline(a=coefm[1], b=coefm[2],
col='navy', lwd=2)
png("figs/figura01.png", res=300, width=2400, height=1200)
png("./figs/figura01.png", res=300, width=2400, height=1200)
png("figs/figura01.png", res=300, width=2400, height=1200)
png("figs/figura01.png", res=300, width=2400, height=1200)
png("figs/figura01.png", res=300, width=2400, height=1200)
par(mfrow=c(1,2), las=1, bty="l")
plot(salario ~ experiencia, data=sal[sal$sexo=="H",],
col="tomato",
ylim=limy, xlim=limx,
ylab=laby, xlab=labx)
mtext("A", 3, adj=0, font=2)
plot(salario ~ experiencia, data=sal[sal$sexo=="M",],
col="navy",
ylim=limy, xlim=limx,
ylab="", xlab=labx)
mtext("B", 3, adj=0, font=2)
abline(a=coefm[1], b=coefm[2],
col='navy', lwd=2)
dev.off()
png("figs/figura01.png", res=300, width=2400, height=1200)
par(mfrow=c(1,2), las=1, bty="l")
plot(salario ~ experiencia, data=sal[sal$sexo=="H",],
col="tomato",
ylim=limy, xlim=limx,
ylab=laby, xlab=labx)
abline(a=coefh[1], b=coefh[2],
col='tomato', lwd=2)
mtext("A", 3, adj=0, font=2)
plot(salario ~ experiencia, data=sal[sal$sexo=="M",],
col="navy",
ylim=limy, xlim=limx,
ylab="", xlab=labx)
mtext("B", 3, adj=0, font=2)
abline(a=coefm[1], b=coefm[2],
col='navy', lwd=2)
dev.off()
# plot dos valores de salario dos homens
plot(salario ~ experiencia, data=sal[sal$sexo=="H",],
col="tomato",
ylim=limy, xlim=limx,
ylab=laby, xlab=labx)
# linha do previsto pelo modelo
## a + b*x
abline(a=coefh[1], b=coefh[2],
col='tomato', lwd=2)
points(salario ~ experiencia, data=sal[sal$sexo=="M",],
col="navy")
abline(a=coefm[1], b=coefm[2],
col='navy', lwd=2)
# incluindo a legenda
legend("topleft", legend=c("homens", "mulheres"),
col=c("tomato", "navy"),
lty=1, bty='n')
par(mfrow=1, las=1, bty="l")
par(mfrow=c(1,1), las=1, bty="l")
# plot dos valores de salario dos homens
plot(salario ~ experiencia, data=sal[sal$sexo=="H",],
col="tomato",
ylim=limy, xlim=limx,
ylab=laby, xlab=labx)
# linha do previsto pelo modelo
## a + b*x
abline(a=coefh[1], b=coefh[2],
col='tomato', lwd=2)
## usando points para adicionar os pontos do salario das mulheres
points(salario ~ experiencia, data=sal[sal$sexo=="M",],
col="navy")
abline(a=coefm[1], b=coefm[2],
col='navy', lwd=2)
# incluindo a legenda
legend("topleft", legend=c("homens", "mulheres"),
col=c("tomato", "navy"),
lty=1, bty='n')
png("figs/figura02.png", res=300, width=2400, height=1200)
# plot dos valores de salario dos homens
plot(salario ~ experiencia, data=sal[sal$sexo=="H",],
col="tomato",
ylim=limy, xlim=limx,
ylab=laby, xlab=labx)
# linha do previsto pelo modelo
## a + b*x
abline(a=coefh[1], b=coefh[2],
col='tomato', lwd=2)
## usando points para adicionar os pontos do salario das mulheres
points(salario ~ experiencia, data=sal[sal$sexo=="M",],
col="navy")
abline(a=coefm[1], b=coefm[2],
col='navy', lwd=2)
# incluindo a legenda
legend("topleft", legend=c("homens", "mulheres"),
col=c("tomato", "navy"),
lty=1, bty='n')
dev.off()
# Boxplot
# criando vetor de cores
cores <- c("#3B9AB2", "#EBCC2A", "#F21A00")
# criando vetor com o nome das espécies
sp <- paste("I.", unique(iris$Species), sep=" ")
cores
sp
par(mfrow=c(2,2), bty='l', las=1)
boxplot(Sepal.Length ~ Species, data=iris, xlab="", col=cores,
xaxt="n")
axis(1, at=1:3, labels=sp, font=3)
boxplot(Sepal.Width ~ Species, data=iris, xlab="", col=cores,
xaxt="n")
axis(1, at=1:3, labels=sp, font=3)
boxplot(Petal.Length ~ Species, data=iris,  col=cores,
xaxt="n")
axis(1, at=1:3, labels=sp, font=3)
boxplot(Petal.Width ~ Species, data=iris, col=cores,
xaxt="n")
axis(1, at=1:3, labels=sp, font=3)
par(mfrow=c(1,1))
# fixando uma semente de numeros aleatorios para manter o mesmo resultado no sample
set.seed(42)
# criando um data frame com valores medios e desvio padrão de uma variável
d2 <- data.frame(name=letters[1:5],
value=sample(seq(4,15),5),
sd=c(1,0.2,3,2,4))
d2
plot(x=1:5, d2$value, las=1, bty='l', ylim=c(0, 18), pch=19, xaxt='n',
xlab="names", ylab="value")
axis(1, at=1:5, labels=d2$name)
arrows(x0=1:5,
y0=d2$value+d2$sd,
y1=d2$value-d2$sd, angle=90, length=0.05, code=3)
png(filename = "../figs/grafico_iris.png", res=300, width=2400, height=1200)
data(iris)
iris
par(mfrow=c(1,3), bty='l', las=1)
a <- lm(Sepal.Width ~ Petal.Length, data = iris[iris$Species == "setosa",])
b <- lm(Sepal.Width ~ Petal.Length, data = iris[iris$Species == "versicolor",])
c <- lm(Sepal.Width ~ Petal.Length, data = iris[iris$Species == "virginica",])
coefa <- coef(a)
coefb <- coef(b)
coefc <- coef(c)
plot(Sepal.Width ~ Petal.Length, data = iris[iris$Species == "setosa",], col = "purple")
abline(a=coefa[1], b=coefa[2], col = "purple")
mtext("A", 3, adj=0, font=2)
plot(Sepal.Width ~ Petal.Length, data = iris[iris$Species == "versicolor",], col = "gold")
abline(a=coefb[1], b=coefb[2], col = "gold")
mtext("B", 3, adj=0, font=2)
plot(Sepal.Width ~ Petal.Length, data = iris[iris$Species == "virginica",], col = "violet")
abline(a=coefc[1], b=coefc[2], col = "violet")
mtext("C", 3, adj=0, font=2)
png(filename = "../figs/grafico_iris.png", res=300, width=2400, height=1200)
png(filename = "./figs/grafico_iris.png", res=300, width=2400, height=1200)
png(filename = "./figs/grafico_iris.png", res=300, width=2400, height=1200)
dev.off()
#para instalar pacotes e carregar:
install.packages("nome")
#para instalar pacotes e carregar:
install.packages("nome do pacote")
library(nome do pacote)
#Pacote para rasters: raster
# install.packages("raster")
#Esse pacote raster no Help tem varios tutoriais imbutidos, pra aprender a mexer
library("raster")
#quando for chamar a tabela, usar
read.table("./Data/exercicio_01_revisado.csv", dec = ",", sep = ";", header = TRUE)
#Exercicio 1
#Você pode ver que existem três guias. Suponha que três estagiários conduziram a coleta de dados e os três registraram os dados à sua maneira. Agora você é a pessoa responsável por este projeto e quer poder começar a analisar os dados. Identifique o que está errado nesta planilha. Discuta com seus colegas as etapas necessárias para limpar as guias e colocá-las todas juntas em uma única planilha. Importante Não se esqueça do nosso primeiro conselho: para criar um novo arquivo (ou guia) para os dados limpos, nunca modifique seus dados originais (brutos).
read.table("./Data/exercicio_01 - para revisao.xlsx")
#Exercicio 1
#Você pode ver que existem três guias. Suponha que três estagiários conduziram a coleta de dados e os três registraram os dados à sua maneira. Agora você é a pessoa responsável por este projeto e quer poder começar a analisar os dados. Identifique o que está errado nesta planilha. Discuta com seus colegas as etapas necessárias para limpar as guias e colocá-las todas juntas em uma única planilha. Importante Não se esqueça do nosso primeiro conselho: para criar um novo arquivo (ou guia) para os dados limpos, nunca modifique seus dados originais (brutos).
planilha_bruta <- read.table("./Data/exercicio_01 - para revisao.xlsx")
planilha_bruta
#Exercicio 1
#Você pode ver que existem três guias. Suponha que três estagiários conduziram a coleta de dados e os três registraram os dados à sua maneira. Agora você é a pessoa responsável por este projeto e quer poder começar a analisar os dados. Identifique o que está errado nesta planilha. Discuta com seus colegas as etapas necessárias para limpar as guias e colocá-las todas juntas em uma única planilha. Importante Não se esqueça do nosso primeiro conselho: para criar um novo arquivo (ou guia) para os dados limpos, nunca modifique seus dados originais (brutos).
# planilha_bruta: "./Data/exercicio_01 - para revisao.xlsx"
# planilha pos-revisao para corrigir os erros: "./Data/exercicio_01_revisado.xlsx"
read.csv("./Data/exercicio_01_revisado.csv")
#Exercicio 1
#Você pode ver que existem três guias. Suponha que três estagiários conduziram a coleta de dados e os três registraram os dados à sua maneira. Agora você é a pessoa responsável por este projeto e quer poder começar a analisar os dados. Identifique o que está errado nesta planilha. Discuta com seus colegas as etapas necessárias para limpar as guias e colocá-las todas juntas em uma única planilha. Importante Não se esqueça do nosso primeiro conselho: para criar um novo arquivo (ou guia) para os dados limpos, nunca modifique seus dados originais (brutos).
# planilha_bruta: "./Data/exercicio_01 - para revisao.xlsx"
# planilha pos-revisao para corrigir os erros: "./Data/exercicio_01_revisado.xlsx"
read.csv("./Data/exercicio_01_revisado.csv", dec = ",", sep = ";", header = TRUE)
#Exercicio 1
#Você pode ver que existem três guias. Suponha que três estagiários conduziram a coleta de dados e os três registraram os dados à sua maneira. Agora você é a pessoa responsável por este projeto e quer poder começar a analisar os dados. Identifique o que está errado nesta planilha. Discuta com seus colegas as etapas necessárias para limpar as guias e colocá-las todas juntas em uma única planilha. Importante Não se esqueça do nosso primeiro conselho: para criar um novo arquivo (ou guia) para os dados limpos, nunca modifique seus dados originais (brutos).
# planilha_bruta: "./Data/exercicio_01 - para revisao.xlsx"
# planilha pos-revisao para corrigir os erros: "./Data/exercicio_01_revisado.xlsx"
planilha_revisada <- read.csv("./Data/exercicio_01_revisado.csv", dec = ",", sep = ";", header = TRUE)
planilha_revisada
#Exercício 2
#Dados de um experimento sobre a tolerância ao frio das espécies de gramíneas Echinochloa crus-galli. Organize os dados em uma única tabela
# planilha_bruta: "./Data/exercicio_02.xlsx"
#planilha pos-revisao para corrigir os erros: "./Data/exercicio_02_revisado.xlsx"
read.csv("./Data/exercicio_02_revisado.csv", dec = ",", sep = ";", header = TRUE)
exercicio2 <- read.csv("./Data/exercicio_02_revisado.csv", dec = ",", sep = ";", header = TRUE)
exercicio2 <- exercicio2[,-5] #veio uma coluna a mais errada, retirei por indexacao
exercicio2
read.csv("./Data/exercicio_02_revisado.csv", dec = ",", sep = ";", header = TRUE)
exercicio2 <- read.csv("./Data/exercicio_02_revisado.csv", dec = ",", sep = ";", header = TRUE)
exercicio2 <- exercicio2[,-5] #veio uma coluna a mais errada, retirei por indexacao
exercicio2
#Calcule a média de ‘uptake’ para ‘Quebec chilled’
exercicio2[exercicio2$study_area == "Quebec", ]
exercicio2[exercicio2$treatment == "chilled", ]
exercicio2[c(exercicio2$study_area == "Quebec" & exercicio2$treatment == "chilled"), ]
quebec_chilled <- exercicio2[c(exercicio2$study_area == "Quebec" & exercicio2$treatment == "chilled"),]
quebec_chilled
mean(quebec_chilled$uptake)
exercicio2[exercicio2$study_area == "Quebec", ]
exercicio2[exercicio2$treatment == "chilled", ]
exercicio2[c(exercicio2$study_area == "Quebec" & exercicio2$treatment == "chilled"), ]
quebec_chilled <- exercicio2[c(exercicio2$study_area == "Quebec" & exercicio2$treatment == "chilled"),]
quebec_chilled
mean(quebec_chilled$uptake)
read.csv("./Data/exercicio_02_revisado.csv", dec = ",", sep = ";", header = TRUE)
exercicio2 <- read.csv("./Data/exercicio_02_revisado.csv", dec = ",", sep = ";", header = TRUE)
exercicio2 <- exercicio2[,-5] #veio uma coluna a mais errada, retirei por indexacao
exercicio2
#Calcule a média de ‘uptake’ para ‘Quebec chilled’
exercicio2[exercicio2$study_area == "Quebec", ]
exercicio2[exercicio2$treatment == "chilled", ]
exercicio2[c(exercicio2$study_area == "Quebec" & exercicio2$treatment == "chilled"), ]
quebec_chilled <- exercicio2[c(exercicio2$study_area == "Quebec" & exercicio2$treatment == "chilled"),]
quebec_chilled
mean(quebec_chilled$uptake)
###Exercicio 3 - Contagem de árvores em parcelas de 1 hectare na Ilha de Barro Colorado.
#Salve os dados em uma planilha, Exporte para um arquivo de texto
#planilha bruta: "./Data/exercicio_03.xlsx"
#planilha como arquivo txt: ".Data/exercicio_03.txt"
read.table("./Data/exercicio_03.txt")
###Exercicio 3 - Contagem de árvores em parcelas de 1 hectare na Ilha de Barro Colorado.
#Salve os dados em uma planilha, Exporte para um arquivo de texto
#planilha bruta: "./Data/exercicio_03.xlsx"
#planilha como arquivo txt: ".Data/exercicio_03.txt"
read.table("./Data/exercicio_03.txt", sep = " ", dec = ",")
###Exercicio 3 - Contagem de árvores em parcelas de 1 hectare na Ilha de Barro Colorado.
#Salve os dados em uma planilha, Exporte para um arquivo de texto
#planilha bruta: "./Data/exercicio_03.xlsx"
#planilha como arquivo txt: ".Data/exercicio_03.txt"
read.table("./Data/exercicio_03.txt", sep = " ", dec = ",")
#leia o arquivo trees.csv que já está no seu diretório data
read.table(file = "./Data/trees.txt", sep = ",")
trees <- read.table(file = "./Data/trees.txt", sep = ",", header = TRUE)
trees
#faça o sumário dos dados
summary(trees)
#calcule o desvio padrão e a variância de cada uma das variáveis
apply(X = trees, MARGIN = 2, FUN = sd)
apply(X = trees, MARGIN = 2, FUN = var)
#construa um histograma para cada uma das variáveis
hist(trees$Girth)
hist(trees$Height)
hist(trees$Volume)
#construa um boxplot das variáveis
boxplot(trees$Girth)
boxplot(trees$Height)
boxplot(trees$Volume)
#identifique o(s) outliers no conjunto de dados. Qual(is) são os valores extremos? De que variável(is)?
outliers_girth <- boxplot(trees$Girth, plot = FALSE)
outliers_girth
which(iris$Sepal.Width %in% outliers_girth$out)
which(trees$Girth %in% outliers_girth$out)
#identifique o(s) outliers no conjunto de dados. Qual(is) são os valores extremos? De que variável(is)?
outliers1 <- boxplot(trees$Girth, plot = FALSE)
outliers1 # o objeto é uma lista e os valores outliers estão guardados no elemento $out da lista
outliers_girth <- outliers1$out
which(trees$Girth %in% outliers_girth)
summary(trees)
trees[which(trees$Girth %in% outliers_girth), c("Girth", "Species")]
trees[which(trees$Girth %in% outliers_girth)]
trees[which(trees$Girth %in% outliers_girth)]
outliers1 <- boxplot(trees$Girth, plot = FALSE)
outliers1 # o objeto é uma lista e os valores outliers estão guardados no elemento $out da lista
outliers_girth <- outliers1$out
which(trees$Girth %in% outliers_girth)
trees[which(trees$Girth %in% outliers_girth)]
outliers2 <- boxplot(trees$Height, plot = FALSE)
outliers2 # o objeto é uma lista e os valores outliers estão guardados no elemento $out da lista
outliers_height <- outliers2$out
which(trees$Height %in% outliers_height)
trees[which(trees$Height %in% outliers_height)]
#construa um boxplot das variáveis
boxplot(trees$Girth)
boxplot(trees$Height)
boxplot(trees$Volume)
outliers3 <- boxplot(trees$Volume, plot = FALSE)
outliers3 # o objeto é uma lista e os valores outliers estão guardados no elemento $out da lista
outliers_volume <- outliers3$out
which(trees$Volume %in% outliers_volume)
trees[which(trees$Volume %in% outliers_volume)]
trees[which(trees$Volume %in% outliers_volume),]
trees[which(trees$Height %in% outliers_height),]
trees[which(trees$Girth %in% outliers_girth),]
trees[which(trees$Volume %in% outliers_volume),]
which.max(trees$volume)
which.max(trees)
which.max(trees$Volume)
value(which.max(trees$volume))
#calcule a correlação par a par entre cada uma das variáveis
pairs(trees)
